What happens when you initialize a repository? Why do you need to do it?

The current version of the project is going to be version 0, as of that moment you can make commits saving the different versions of the software as we introduce functional changes in it


How is the staging area different from the working directory and the repository? What value do you think it offers?

is an intermediate area where once  we have modified the project files, they are added to perform the commit. It is different with respect to the repository (where the different compressed versions of the project are saved), such as the Working area (where the last version of which the commit has been made), in which it does not really save data, simply serves as a bridge between the repository and the working area 


How can you use the staging area to make sure you have one commit per logical change?

using the staging area, it allows to separate the changes of different files in different commits if necessary since the changes introduced had a different functional meaning. In the same way, it allows to join in a single commit or version, the changes in several files, which we consider to apply to the same functionality


What are some situations when branches would be helpful in keeping your history organized? How would branches help?

When it is necessary to introduce changes that leave the functional line of the original project, allowing to have alternative branches based on the base project, but with its own functional evolution.
They will allow to have organized in a separated branch those functional modifications that do not enter in the line of teacher of the project


How do the diagrams help you visualize the branch structure?

A diagram of the different branches of project code will allow you to place the commits / modifications that have been made throughout a project in each of the different functional branches in which it may be broken. It also allows controlling, what functional changes each branch has and what synchronism points a particular branch can access.


What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

The result of the merge of the 2 branches, gives a unique branch of the original softrware project of those that had split both branches, but with all the compatible functional modifications introduced in both branches.
It is usually represented in a diagram, in order to have a global view of all the changes that have been introduced in the evolution of both branches, as well as being able to control which ones should enter the merge and which ones should be discarded due to incopatibility.


What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?


Pro: automatic merge can be done all the time, with no cost to the developer. This is very useful when they are a large group of developers in the same project, performing a manual merge involves a high cost of time and resources.

Con: As we have seen in the practices, the merge aturmatico is not quite perfect, being able to leave inconsistencies / conflicts at code level that can only be detected / corrected with a manual merge